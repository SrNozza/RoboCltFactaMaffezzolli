#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'sinatra'
require 'httparty'
require 'json'
require 'base64'
require 'csv'
require 'date'

# Configura√ß√µes da aplica√ß√£o
configure do
  set :bind, '0.0.0.0'
  set :port, ENV['PORT'] || 4570  # Railway usa PORT environment variable
  set :public_folder, 'public'
  set :views, 'views'
end

# Configura√ß√µes da API Facta
API_BASE = 'https://webservice.facta.com.br'
CREDENTIALS = {
  login: '96676',
  password: 'feaeqoxmbh3lzzpg3wpb',
  usuario_certificado: '96676_bombom'
}

# Cache do token
$token_cache = { token: nil, expires: nil }

# Fun√ß√£o para gerar token
def get_token
  begin
    # Verifica se tem token v√°lido em cache
    if $token_cache[:token] && $token_cache[:expires] && Time.now < $token_cache[:expires]
      puts "‚úÖ Usando token em cache"
      return $token_cache[:token]
    end
    
    # Gera novo token
    auth_string = "#{CREDENTIALS[:login]}:#{CREDENTIALS[:password]}"
    encoded_auth = Base64.strict_encode64(auth_string)
    
    headers = {
      'Authorization' => "Basic #{encoded_auth}",
      'Content-Type' => 'application/json',
      'User-Agent' => 'RoboMaffezzolli/1.0'
    }
    
    puts "üîë Solicitando token da API Facta..."
    puts "üîë URL: #{API_BASE}/gera-token"
    puts "üîë Headers: #{headers}"
    
    response = HTTParty.get("#{API_BASE}/gera-token", 
      headers: headers,
      timeout: 30
    )
    
    puts "üîë Status: #{response.code}"
    puts "üîë Resposta: #{response.body}"
    
    if response.success?
      data = JSON.parse(response.body)
      
      if data['erro'] == false && data['token']
        $token_cache[:token] = data['token']
        $token_cache[:expires] = Time.now + (50 * 60) # 50 minutos
        
        puts "‚úÖ Token gerado com sucesso!"
        return data['token']
      else
        puts "‚ùå API retornou erro: #{data['mensagem']}"
        return nil
      end
    else
      puts "‚ùå Erro HTTP: #{response.code} - #{response.message}"
      return nil
    end
    
  rescue => e
    puts "‚ùå Erro ao gerar token: #{e.message}"
    puts e.backtrace
    return nil
  end
end

# Fun√ß√£o para consultar simula√ß√£o de valores (Etapa 5)
def consultar_simulacao(cpf, data_nascimento, codigo_tabela, prazo, valor_parcela)
  begin
    token = get_token
    return nil unless token
    
    headers = {
      'Authorization' => "Bearer #{token}",
      'Content-Type' => 'application/x-www-form-urlencoded'
    }
    
    body = {
      'produto' => 'D',
      'tipo_operacao' => '13',
      'averbador' => '10010',
      'convenio' => '3',
      'cpf' => cpf,
      'data_nascimento' => data_nascimento,
      'login_certificado' => '96676',
      'codigo_tabela' => codigo_tabela,
      'prazo' => prazo,
      'valor_operacao' => '1000.00',  # Valor inicial
      'valor_parcela' => valor_parcela,
      'coeficiente' => '0.029000'
    }
    
    url = "#{API_BASE}/proposta/etapa1-simulador"
    puts "üîç Consultando simula√ß√£o: CPF #{cpf}, Tabela #{codigo_tabela}, Prazo #{prazo}, Parcela #{valor_parcela}"
    
    response = HTTParty.post(url, 
      headers: headers,
      body: body,
      timeout: 30
    )
    
    puts "üîç Status simula√ß√£o: #{response.code}"
    puts "üîç Resposta simula√ß√£o: #{response.body}"
    
    if response.success?
      data = JSON.parse(response.body)
      if data['erro'] == false
        return {
          id_simulador: data['id_simulador'],
          valor_maximo_calculado: (valor_parcela.to_f * prazo.to_i).round(2)
        }
      end
    end
    
    return nil
    
  rescue => e
    puts "‚ùå Erro na simula√ß√£o: #{e.message}"
    return nil
  end
end

# Fun√ß√£o para consultar CPF
def consultar_cpf(cpf)
  begin
    token = get_token
    return { erro: true, mensagem: 'Token n√£o obtido' } unless token
    
    headers = {
      'Authorization' => "Bearer #{token}",
      'Content-Type' => 'application/json',
      'User-Agent' => 'RoboMaffezzolli/1.0'
    }
    
    url = "#{API_BASE}/consignado-trabalhador/autoriza-consulta?cpf=#{cpf}"
    puts "üîç Consultando CPF #{cpf}: #{url}"
    
    response = HTTParty.get(url, 
      headers: headers,
      timeout: 30
    )
    
    puts "üîç Status: #{response.code}"
    puts "üîç Resposta: #{response.body}"
    
    if response.success?
      data = JSON.parse(response.body)
      
      if data['erro'] == false && data['dados_trabalhador'] && data['dados_trabalhador']['dados'] && data['dados_trabalhador']['dados'].length > 0
        # Extrai dados do primeiro trabalhador
        trabalhador = data['dados_trabalhador']['dados'][0]
        puts "‚úÖ Dados extra√≠dos: #{trabalhador['nome']}, Renda: #{trabalhador['valorTotalVencimentos']}"
        return {
          cpf: cpf,
          erro: false,
          mensagem: data['mensagem'],
          raw_data: trabalhador
        }
      else
        puts "‚ùå Erro na resposta: #{data['mensagem']}"
        return {
          cpf: cpf,
          erro: true,
          mensagem: data['mensagem'] || 'Dados n√£o encontrados',
          raw_data: nil
        }
      end
    else
      return {
        cpf: cpf,
        erro: true,
        mensagem: "Erro HTTP: #{response.code}",
        raw_data: nil
      }
    end
    
  rescue => e
    puts "‚ùå Erro ao consultar CPF #{cpf}: #{e.message}"
    return {
      cpf: cpf,
      erro: true,
      mensagem: "Exce√ß√£o: #{e.message}",
      raw_data: nil
    }
  end
end

# Fun√ß√£o para consultar pol√≠tica de cr√©dito
def consultar_politica_credito(cpf, data_nascimento, tempo_empresa, valor_renda, sexo)
  begin
    token = get_token
    return nil unless token
    
    # Calcula CNAE padr√£o (00) e prazo padr√£o (36)
    cnae = "00"
    prazo = 36
    valor = (valor_renda.to_f * 100).to_i  # Converte para centavos
    
    url = "#{API_BASE}/consignado-trabalhador/valida-politica-credito"
    params = {
      cpf: cpf,
      tempo_meses_empresa: tempo_empresa,
      data_nascimento: data_nascimento,
      prazo: prazo,
      valor: valor,
      cnae: cnae,
      sexo: sexo
    }
    
    headers = {
      'Authorization' => "Bearer #{token}",
      'Content-Type' => 'application/json',
      'User-Agent' => 'RoboMaffezzolli/1.0'
    }
    
    puts "üîç Consultando pol√≠tica de cr√©dito para CPF #{cpf}..."
    puts "üîç URL: #{url}"
    puts "üîç Params: #{params}"
    
    response = HTTParty.get(url, query: params, headers: headers, timeout: 30)
    
    puts "üìä Status pol√≠tica de cr√©dito: #{response.code}"
    puts "üìä Response pol√≠tica de cr√©dito: #{response.body}"
    
    if response.success?
      data = JSON.parse(response.body)
      if data['erro'] == false
        return {
          prazo_maximo: data['prazo'],
          valor_maximo: data['valor']
        }
      end
    end
    
    return nil
  rescue => e
    puts "‚ùå Erro na consulta de pol√≠tica de cr√©dito: #{e.message}"
    return nil
  end
end

# Fun√ß√£o para consultar opera√ß√µes dispon√≠veis
def consultar_operacoes_disponiveis(cpf, data_nascimento, valor_renda, valor_parcela, prazo = 36)
  begin
    token = get_token
    return nil unless token
    
    url = "#{API_BASE}/proposta/operacoes-disponiveis"
    params = {
      produto: 'D',
      tipo_operacao: 13,
      averbador: 10010,
      convenio: 3,
      opcao_valor: 2,  # 2 = parcela
      valor_parcela: valor_parcela,
      prazo: prazo,
      cpf: cpf,
      data_nascimento: data_nascimento,
      valor_renda: valor_renda
    }
    
    headers = {
      'Authorization' => "Bearer #{token}",
      'Content-Type' => 'application/json',
      'User-Agent' => 'RoboMaffezzolli/1.0'
    }
    
    puts "üîç Consultando opera√ß√µes dispon√≠veis para CPF #{cpf}..."
    puts "üîç URL: #{url}"
    puts "üîç Params: #{params}"
    
    response = HTTParty.get(url, query: params, headers: headers, timeout: 30)
    
    puts "üìä Status opera√ß√µes dispon√≠veis: #{response.code}"
    puts "üìä Response opera√ß√µes dispon√≠veis: #{response.body}"
    
    if response.success?
      data = JSON.parse(response.body)
      if data['erro'] == false && data['tabelas'] && !data['tabelas'].empty?
        # Pega a primeira tabela dispon√≠vel (melhor op√ß√£o)
        tabela = data['tabelas'][0]
        return {
          tabela: tabela['tabela'],
          codigo_tabela: tabela['codigoTabela'],
          taxa: tabela['taxa'],
          prazo: tabela['prazo'],
          contrato: tabela['contrato'],
          parcela: tabela['parcela'],
          coeficiente: tabela['coeficiente']
        }
      end
    end
    
    return nil
  rescue => e
    puts "‚ùå Erro na consulta de opera√ß√µes dispon√≠veis: #{e.message}"
    return nil
  end
end

# Rota principal
get '/' do
  erb :index
end

# Rota para testar conex√£o
get '/api/test-connection' do
  content_type :json
  
  token = get_token
  
  if token
    {
      success: true,
      message: 'Conex√£o estabelecida com sucesso',
      token_available: true,
      timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
    }.to_json
  else
    status 401
    {
      success: false,
      message: 'Falha na autentica√ß√£o com a API',
      token_available: false,
      timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
    }.to_json
  end
end

# Rota para simular um √∫nico CPF
post '/api/simulate-single' do
  content_type :json
  
  begin
    request_data = JSON.parse(request.body.read)
    cpf = request_data['cpf']
    
    if cpf.nil? || cpf.empty?
      status 400
      return { error: 'CPF n√£o fornecido' }.to_json
    end
    
    # Processa apenas um CPF
    clean_cpf = cpf.gsub(/\D/, '').rjust(11, '0')
    puts "üîç DEBUG CPF: '#{cpf}' ‚Üí '#{clean_cpf}' (#{clean_cpf.length} d√≠gitos)"
    
    if clean_cpf.length == 11
      result = consultar_cpf(clean_cpf)
      
      # Inicializa valores padr√£o
      valor_maximo_emprestimo = 'N/A'
      prazo_maximo = 'N/A'
      taxa_juros = 'N/A'
      tabela_operacao = 'N/A'
      
      # Calcula margem utiliz√°vel (69,90% da margem dispon√≠vel)
      margem_utilizavel = 0
      if result[:raw_data] && result[:raw_data]['valorMargemDisponivel']
        margem_raw = result[:raw_data]['valorMargemDisponivel'].gsub(',', '.').to_f
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_raw = #{result[:raw_data]['valorMargemDisponivel']}"
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_total = #{margem_raw}"
        margem_utilizavel = margem_raw * 0.699
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_utilizavel = #{margem_utilizavel}"
      end
      
      # Se o CPF √© eleg√≠vel, faz consultas adicionais
      puts "üîç DEBUG: Verificando elegibilidade para #{clean_cpf}"
      puts "üîç DEBUG: result[:raw_data] = #{result[:raw_data] ? 'presente' : 'ausente'}"
      if result[:raw_data]
        puts "üîç DEBUG: elegivel = #{result[:raw_data]['elegivel']}"
      end
      
      if result[:raw_data] && result[:raw_data]['elegivel'] == 'SIM'
        puts "üîß CONSULTANDO VALORES DIN√ÇMICOS DA API para CPF #{clean_cpf}"
        
        # Extrai dados necess√°rios para as consultas
        data_nascimento = result[:raw_data]['dataNascimento']
        valor_renda = result[:raw_data]['valorTotalVencimentos'].gsub(',', '.').to_f
        sexo_codigo = result[:raw_data]['sexo_codigo']
        
        # Converte c√≥digo de sexo para formato da API
        sexo = case sexo_codigo
               when '1' then 'M'
               when '2' then 'F'
               else 'M' # padr√£o
               end
        
        # Calcula tempo de empresa (assumindo data de admiss√£o)
        if result[:raw_data]['dataAdmissao'] && !result[:raw_data]['dataAdmissao'].empty?
          data_admissao = Date.strptime(result[:raw_data]['dataAdmissao'], '%d/%m/%Y')
          tempo_empresa = ((Date.today - data_admissao) / 30).to_i # meses
        else
          tempo_empresa = 12 # padr√£o se n√£o tiver data
        end
        
        puts "üîç Dados extra√≠dos - data_nascimento: #{data_nascimento}, valor_renda: #{valor_renda}, sexo_codigo: #{sexo_codigo} ‚Üí sexo: #{sexo}"
        puts "üîç tempo_empresa calculado: #{tempo_empresa} meses"
        
        # 1. Consulta pol√≠tica de cr√©dito (limites m√°ximos)
        politica = consultar_politica_credito(clean_cpf, data_nascimento, tempo_empresa, valor_renda, sexo)
        puts "üîç Pol√≠tica de cr√©dito para #{clean_cpf}: #{politica}"
        
        # 2. Calcula margem utiliz√°vel (69,90% da margem dispon√≠vel)
        margem_utilizavel_valor = margem_utilizavel
        puts "üîç Margem utiliz√°vel para #{clean_cpf}: #{margem_utilizavel_valor}"
        
        # 3. Consulta opera√ß√µes dispon√≠veis
        operacoes = consultar_operacoes_disponiveis(clean_cpf, data_nascimento, valor_renda, margem_utilizavel_valor)
        puts "üîç Opera√ß√µes dispon√≠veis para #{clean_cpf}: #{operacoes}"
        
        # 4. Aplica l√≥gica de prioriza√ß√£o
        if operacoes && politica
          puts "üîç Compara√ß√£o #{clean_cpf}: Pol√≠tica=R$#{politica[:valor_maximo]}/#{politica[:prazo_maximo]}m vs Opera√ß√µes=R$#{operacoes[:contrato]}/#{operacoes[:prazo]}m"
          
          # Se opera√ß√µes excedem limites da pol√≠tica, ajusta
          if operacoes[:contrato].to_f > politica[:valor_maximo].to_f || operacoes[:prazo].to_i > politica[:prazo_maximo].to_i
            puts "‚ö†Ô∏è Valor/prazo excede pol√≠tica para #{clean_cpf}, ajustando..."
            
            # Recalcula com limites da pol√≠tica
            nova_parcela = politica[:valor_maximo].to_f / politica[:prazo_maximo].to_i
            puts "üîç Nova parcela calculada para #{clean_cpf}: R$ #{nova_parcela.round(2)}"
            
            operacoes_ajustadas = consultar_operacoes_disponiveis(clean_cpf, data_nascimento, valor_renda, nova_parcela, politica[:prazo_maximo].to_i)
            puts "üîç Opera√ß√µes ajustadas para #{clean_cpf}: #{operacoes_ajustadas}"
            
            if operacoes_ajustadas
              valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
              prazo_maximo = "#{politica[:prazo_maximo]} meses"
              taxa_juros = "#{operacoes_ajustadas[:taxa]}%"
              tabela_operacao = operacoes_ajustadas[:tabela]
              puts "‚úÖ Usando opera√ß√µes ajustadas para #{clean_cpf}"
            else
              # Fallback para pol√≠tica
              valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
              prazo_maximo = "#{politica[:prazo_maximo]} meses"
              puts "‚úÖ Usando pol√≠tica para #{clean_cpf}"
            end
          else
            # Usa opera√ß√µes dispon√≠veis
            valor_maximo_emprestimo = "R$ #{operacoes[:contrato]}"
            prazo_maximo = "#{operacoes[:prazo]} meses"
            taxa_juros = "#{operacoes[:taxa]}%"
            tabela_operacao = operacoes[:tabela]
            puts "‚úÖ Usando opera√ß√µes para #{clean_cpf}"
          end
        elsif operacoes
          # S√≥ tem opera√ß√µes
          valor_maximo_emprestimo = "R$ #{operacoes[:contrato]}"
          prazo_maximo = "#{operacoes[:prazo]} meses"
          taxa_juros = "#{operacoes[:taxa]}%"
          tabela_operacao = operacoes[:tabela]
          puts "‚úÖ Usando apenas opera√ß√µes para #{clean_cpf}"
        elsif politica
          # S√≥ tem pol√≠tica
          valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
          prazo_maximo = "#{politica[:prazo_maximo]} meses"
          puts "‚úÖ Usando apenas pol√≠tica para #{clean_cpf}"
        else
          puts "‚ùå Nenhuma consulta retornou dados para #{clean_cpf}"
        end
        
        puts "üéØ Resultado final para #{clean_cpf}: #{valor_maximo_emprestimo}, #{prazo_maximo}, #{taxa_juros}"
      end
      
      formatted_result = {
        cpf: clean_cpf,
        status: result[:erro] ? 'Erro' : 'Sucesso',
        nome: result[:raw_data] ? result[:raw_data]['nome'] : result[:mensagem],
        renda: result[:raw_data] ? "R$ #{result[:raw_data]['valorTotalVencimentos']}" : 'N/A',
        margem: result[:raw_data] ? "R$ #{result[:raw_data]['valorMargemDisponivel']}" : 'N/A',
        elegivel: result[:raw_data] ? (result[:raw_data]['elegivel'] == 'SIM' ? 'Sim' : 'Nao') : 'N/A',
        data_nascimento: result[:raw_data] ? result[:raw_data]['dataNascimento'] : 'N/A',
        matricula: result[:raw_data] ? result[:raw_data]['matricula'] : 'N/A',
        empregador: result[:raw_data] ? result[:raw_data]['nomeEmpregador'] : 'N/A',
        valor_maximo_emprestimo: valor_maximo_emprestimo,
        prazo_maximo: prazo_maximo,
        valor_contrato_maximo: margem_utilizavel > 0 ? "R$ #{margem_utilizavel.round(2)}" : 'N/A',  # 69,90% da margem
        taxa_juros: taxa_juros,
        tabela_operacao: tabela_operacao,
        raw_data: result[:raw_data]
      }
      
      # Salva dados no cache global para exporta√ß√£o
      $simulation_data << {
        cpf: clean_cpf,
        nome: formatted_result[:nome],
        status: formatted_result[:status],
        data_nascimento: formatted_result[:data_nascimento],
        sexo: result[:raw_data] ? result[:raw_data]['sexo_descricao'] : 'N/A',
        matricula: formatted_result[:matricula],
        renda: formatted_result[:renda],
        base_margem: result[:raw_data] ? "R$ #{result[:raw_data]['valorBaseMargem']}" : 'N/A',
        margem_disponivel: formatted_result[:margem],
        elegivel: formatted_result[:elegivel],
        data_admissao: result[:raw_data] ? result[:raw_data]['dataAdmissao'] : 'N/A',
        data_desligamento: result[:raw_data] ? result[:raw_data]['dataDesligamento'] : 'N/A',
        empregador: formatted_result[:empregador],
        cnpj_empregador: result[:raw_data] ? result[:raw_data]['numeroInscricaoEmpregador'] : 'N/A',
        tipo_inscricao: result[:raw_data] ? result[:raw_data]['inscricaoEmpregador_descricao'] : 'N/A',
        cnae_descricao: result[:raw_data] ? result[:raw_data]['cnae_descricao'] : 'N/A',
        data_inicio_atividade_empregador: result[:raw_data] ? result[:raw_data]['dataInicioAtividadeEmpregador'] : 'N/A',
        nome_mae: result[:raw_data] ? result[:raw_data]['nomeMae'] : 'N/A',
        nacionalidade: result[:raw_data] ? result[:raw_data]['paisNacionalidade_descricao'] : 'N/A',
        cbo_descricao: result[:raw_data] ? result[:raw_data]['cbo_descricao'] : 'N/A',
        codigo_categoria: result[:raw_data] ? result[:raw_data]['codigoCategoriaTrabalhador'] : 'N/A',
        pessoa_exposta_politicamente: result[:raw_data] ? result[:raw_data]['pessoaExpostaPoliticamente_descricao'] : 'N/A',
        possui_alertas: result[:raw_data] ? result[:raw_data]['possuiAlertas'] : 'N/A',
        qtd_emprestimos_ativos: result[:raw_data] ? result[:raw_data]['qtdEmprestimosAtivosSuspensos'] : 'N/A',
        emprestimos_legados: result[:raw_data] ? result[:raw_data]['emprestimosLegados'] : 'N/A',
        motivo_inelegibilidade: result[:raw_data] ? result[:raw_data]['motivoInelegibilidade_descricao'] : 'N/A',
        erro_codigo: result[:raw_data] ? result[:raw_data]['erro_codigo'] : 'N/A',
        erro_mensagem: result[:raw_data] ? result[:raw_data]['erro_mensagem'] : 'N/A',
        status_code: result[:raw_data] ? result[:raw_data]['status_code'] : 'N/A',
        valor_maximo_emprestimo: valor_maximo_emprestimo,
        prazo_maximo: prazo_maximo,
        valor_contrato_maximo: formatted_result[:valor_contrato_maximo],
        taxa_juros: taxa_juros,
        tabela_operacao: tabela_operacao,
        timestamp: Time.now.strftime('%d/%m/%Y %H:%M')
      }
      
      return {
        success: true,
        result: formatted_result,
        timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
      }.to_json
    else
      return {
        success: false,
        error: 'CPF deve ter 11 d√≠gitos',
        cpf: cpf,
        timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
      }.to_json
    end
    
  rescue => e
    puts "‚ùå Erro na simula√ß√£o individual: #{e.message}"
    puts e.backtrace
    status 500
    return {
      success: false,
      error: e.message,
      timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
    }.to_json
  end
end

# Rota para simular CPFs (mantida para compatibilidade)
post '/api/simulate' do
  content_type :json
  
  # Limpa cache de dados anteriores
  $simulation_data = []
  puts "üîÑ Cache de simula√ß√£o limpo"
  
  begin
    
    request_data = JSON.parse(request.body.read)
    cpfs = request_data['cpfs'] || []
    
    if cpfs.empty?
      status 400
      return { error: 'Nenhum CPF fornecido' }.to_json
    end
    
    results = []
    
    cpfs.each do |cpf|
      # Limpa CPF (remove caracteres n√£o num√©ricos) e adiciona zeros √† esquerda se necess√°rio
      clean_cpf = cpf.gsub(/\D/, '').rjust(11, '0')
      puts "üîç DEBUG CPF: '#{cpf}' ‚Üí '#{clean_cpf}' (#{clean_cpf.length} d√≠gitos)"
      
      if clean_cpf.length == 11
        result = consultar_cpf(clean_cpf)
        
        # Formata resultado para exibi√ß√£o
        margem_raw = result[:raw_data] ? result[:raw_data]['valorMargemDisponivel'] : nil
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_raw = #{margem_raw}"
        margem_total = margem_raw ? margem_raw.gsub(',', '.').to_f : 0  # Converte v√≠rgula para ponto
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_total = #{margem_total}"
        margem_utilizavel = margem_total * 0.699  # 69,90% da margem dispon√≠vel
        puts "üîç DEBUG MARGEM - CPF #{clean_cpf}: margem_utilizavel = #{margem_utilizavel}"
        
        # Inicializa valores padr√£o
        valor_maximo_emprestimo = 'N/A'
        prazo_maximo = 'N/A'
        taxa_juros = 'N/A'
        tabela_operacao = 'N/A'
        
        # Se o CPF √© eleg√≠vel, faz consultas adicionais
        puts "üîç DEBUG: Verificando elegibilidade para #{clean_cpf}"
        puts "üîç DEBUG: result[:raw_data] = #{result[:raw_data] ? 'presente' : 'ausente'}"
        if result[:raw_data]
          puts "üîç DEBUG: elegivel = #{result[:raw_data]['elegivel']}"
        end
        
        if result[:raw_data] && result[:raw_data]['elegivel'] == 'SIM'
          puts "üîß CONSULTANDO VALORES DIN√ÇMICOS DA API para CPF #{clean_cpf}"
          
          # Extrai dados necess√°rios para as consultas
          data_nascimento = result[:raw_data]['dataNascimento']
          valor_renda = result[:raw_data]['valorTotalVencimentos'].gsub(',', '.').to_f
          sexo_codigo = result[:raw_data]['sexo_codigo']
          
          # Converte c√≥digo de sexo para formato da API
          sexo = case sexo_codigo
                 when '1' then 'M'
                 when '2' then 'F'
                 else 'M' # padr√£o
                 end
          
          # Calcula tempo de empresa (assumindo data de admiss√£o)
          if result[:raw_data]['dataAdmissao'] && !result[:raw_data]['dataAdmissao'].empty?
            data_admissao = Date.strptime(result[:raw_data]['dataAdmissao'], '%d/%m/%Y')
            tempo_empresa = ((Date.today - data_admissao) / 30).to_i # meses
          else
            tempo_empresa = 12 # padr√£o se n√£o tiver data
          end
          
          puts "üîç Dados extra√≠dos - data_nascimento: #{data_nascimento}, valor_renda: #{valor_renda}, sexo_codigo: #{sexo_codigo} ‚Üí sexo: #{sexo}"
          puts "üîç tempo_empresa calculado: #{tempo_empresa} meses"
          
          # 1. Consulta pol√≠tica de cr√©dito (limites m√°ximos)
          politica = consultar_politica_credito(clean_cpf, data_nascimento, tempo_empresa, valor_renda, sexo)
          puts "üîç Pol√≠tica de cr√©dito para #{clean_cpf}: #{politica}"
          
          # 2. Calcula margem utiliz√°vel (69,90% da margem dispon√≠vel)
          margem_utilizavel_valor = margem_utilizavel
          puts "üîç Margem utiliz√°vel para #{clean_cpf}: #{margem_utilizavel_valor}"
          
          # 3. Consulta opera√ß√µes dispon√≠veis
          operacoes = consultar_operacoes_disponiveis(clean_cpf, data_nascimento, valor_renda, margem_utilizavel_valor)
          puts "üîç Opera√ß√µes dispon√≠veis para #{clean_cpf}: #{operacoes}"
          
          # 4. Aplica l√≥gica de prioriza√ß√£o
          if operacoes && politica
            puts "üîç Compara√ß√£o #{clean_cpf}: Pol√≠tica=R$#{politica[:valor_maximo]}/#{politica[:prazo_maximo]}m vs Opera√ß√µes=R$#{operacoes[:contrato]}/#{operacoes[:prazo]}m"
            
            # Se opera√ß√µes excedem limites da pol√≠tica, ajusta
            if operacoes[:contrato].to_f > politica[:valor_maximo].to_f || operacoes[:prazo].to_i > politica[:prazo_maximo].to_i
              puts "‚ö†Ô∏è Valor/prazo excede pol√≠tica para #{clean_cpf}, ajustando..."
              
              # Recalcula com limites da pol√≠tica
              nova_parcela = politica[:valor_maximo].to_f / politica[:prazo_maximo].to_i
              puts "üîç Nova parcela calculada para #{clean_cpf}: R$ #{nova_parcela.round(2)}"
              
              operacoes_ajustadas = consultar_operacoes_disponiveis(clean_cpf, data_nascimento, valor_renda, nova_parcela, politica[:prazo_maximo].to_i)
              puts "üîç Opera√ß√µes ajustadas para #{clean_cpf}: #{operacoes_ajustadas}"
              
              if operacoes_ajustadas
                valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
                prazo_maximo = "#{politica[:prazo_maximo]} meses"
                taxa_juros = "#{operacoes_ajustadas[:taxa]}%"
                tabela_operacao = operacoes_ajustadas[:tabela]
                puts "‚úÖ Usando opera√ß√µes ajustadas para #{clean_cpf}"
              else
                # Fallback para pol√≠tica
                valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
                prazo_maximo = "#{politica[:prazo_maximo]} meses"
                puts "‚úÖ Usando pol√≠tica para #{clean_cpf}"
              end
            else
              # Usa opera√ß√µes dispon√≠veis
              valor_maximo_emprestimo = "R$ #{operacoes[:contrato]}"
              prazo_maximo = "#{operacoes[:prazo]} meses"
              taxa_juros = "#{operacoes[:taxa]}%"
              tabela_operacao = operacoes[:tabela]
              puts "‚úÖ Usando opera√ß√µes para #{clean_cpf}"
            end
          elsif operacoes
            # S√≥ tem opera√ß√µes
            valor_maximo_emprestimo = "R$ #{operacoes[:contrato]}"
            prazo_maximo = "#{operacoes[:prazo]} meses"
            taxa_juros = "#{operacoes[:taxa]}%"
            tabela_operacao = operacoes[:tabela]
            puts "‚úÖ Usando apenas opera√ß√µes para #{clean_cpf}"
          elsif politica
            # S√≥ tem pol√≠tica
            valor_maximo_emprestimo = "R$ #{politica[:valor_maximo]}"
            prazo_maximo = "#{politica[:prazo_maximo]} meses"
            puts "‚úÖ Usando apenas pol√≠tica para #{clean_cpf}"
          else
            puts "‚ùå Nenhuma consulta retornou dados para #{clean_cpf}"
          end
          
          puts "üéØ Resultado final para #{clean_cpf}: #{valor_maximo_emprestimo}, #{prazo_maximo}, #{taxa_juros}"
        end
        
        formatted_result = {
          cpf: clean_cpf,
          status: result[:erro] ? 'Erro' : 'Sucesso',
          nome: result[:raw_data] ? result[:raw_data]['nome'] : result[:mensagem],
          renda: result[:raw_data] ? "R$ #{result[:raw_data]['valorTotalVencimentos']}" : 'N/A',
          margem: result[:raw_data] ? "R$ #{result[:raw_data]['valorMargemDisponivel']}" : 'N/A',
          elegivel: result[:raw_data] ? (result[:raw_data]['elegivel'] == 'SIM' ? 'Sim' : 'Nao') : 'N/A',
          data_nascimento: result[:raw_data] ? result[:raw_data]['dataNascimento'] : 'N/A',
          matricula: result[:raw_data] ? result[:raw_data]['matricula'] : 'N/A',
          empregador: result[:raw_data] ? result[:raw_data]['nomeEmpregador'] : 'N/A',
          valor_maximo_emprestimo: valor_maximo_emprestimo,
          prazo_maximo: prazo_maximo,
          valor_contrato_maximo: margem_utilizavel > 0 ? "R$ #{margem_utilizavel.round(2)}" : 'N/A',  # 69,90% da margem
          taxa_juros: taxa_juros,
          tabela_operacao: tabela_operacao,
          raw_data: result[:raw_data]
        }
        
        # Salva dados no cache global para exporta√ß√£o
        $simulation_data << {
          cpf: clean_cpf,
          nome: formatted_result[:nome],
          status: formatted_result[:status],
          data_nascimento: formatted_result[:data_nascimento],
          sexo: result[:raw_data] ? result[:raw_data]['sexo_descricao'] : 'N/A',
          matricula: formatted_result[:matricula],
          renda: formatted_result[:renda],
          base_margem: result[:raw_data] ? "R$ #{result[:raw_data]['valorBaseMargem']}" : 'N/A',
          margem: formatted_result[:margem],
          elegivel: formatted_result[:elegivel],
          data_admissao: result[:raw_data] ? result[:raw_data]['dataAdmissao'] : 'N/A',
          data_desligamento: result[:raw_data] ? result[:raw_data]['dataDesligamento'] : 'N/A',
          empregador: formatted_result[:empregador],
          cnpj_empregador: result[:raw_data] ? result[:raw_data]['numeroInscricaoEmpregador'] : 'N/A',
          tipo_inscricao: result[:raw_data] ? result[:raw_data]['inscricaoEmpregador_descricao'] : 'N/A',
          cnae_descricao: result[:raw_data] ? result[:raw_data]['cnae_descricao'] : 'N/A',
          data_inicio_atividade: result[:raw_data] ? result[:raw_data]['dataInicioAtividadeEmpregador'] : 'N/A',
          nome_mae: result[:raw_data] ? result[:raw_data]['nomeMae'] : 'N/A',
          nacionalidade: result[:raw_data] ? result[:raw_data]['paisNacionalidade_descricao'] : 'N/A',
          cbo_descricao: result[:raw_data] ? result[:raw_data]['cbo_descricao'] : 'N/A',
          codigo_categoria: result[:raw_data] ? result[:raw_data]['codigoCategoriaTrabalhador'] : 'N/A',
          pessoa_exposta: result[:raw_data] ? result[:raw_data]['pessoaExpostaPoliticamente_descricao'] : 'N/A',
          possui_alertas: result[:raw_data] ? result[:raw_data]['possuiAlertas'] : 'N/A',
          qtd_emprestimos: result[:raw_data] ? result[:raw_data]['qtdEmprestimosAtivosSuspensos'] : 'N/A',
          emprestimos_legados: result[:raw_data] ? result[:raw_data]['emprestimosLegados'] : 'N/A',
          motivo_inelegibilidade: result[:raw_data] ? result[:raw_data]['motivoInelegibilidade_descricao'] : 'N/A',
          erro_codigo: result[:raw_data] ? result[:raw_data]['erro_codigo'] : 'N/A',
          erro_mensagem: result[:raw_data] ? result[:raw_data]['erro_mensagem'] : 'N/A',
          status_code: result[:raw_data] ? result[:raw_data]['status_code'] : 'N/A',
          valor_maximo_emprestimo: formatted_result[:valor_maximo_emprestimo],
          prazo_maximo: formatted_result[:prazo_maximo],
          valor_contrato_maximo: formatted_result[:valor_contrato_maximo],
          taxa_juros: formatted_result[:taxa_juros],
          tabela_operacao: formatted_result[:tabela_operacao]
        }
        
        results << formatted_result
      else
        results << {
          cpf: cpf,
          status: 'Erro',
          nome: 'CPF inv√°lido',
          error: 'CPF deve ter 11 d√≠gitos'
        }
      end
    end
    
    {
      success: true,
      results: results,
      total: results.length,
      timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
    }.to_json
    
  rescue => e
    puts "‚ùå Erro na simula√ß√£o: #{e.message}"
    status 500
    {
      success: false,
      error: e.message,
      timestamp: Time.now.strftime('%d/%m/%Y %H:%M:%S')
    }.to_json
  end
end

# Rota para exportar CSV
get '/api/export-csv' do
  content_type 'text/csv'
  attachment 'simulacao_maffezzolli.csv'
  
  # Dados de exemplo (em produ√ß√£o, viria do banco de dados)
  csv_data = CSV.generate(headers: true) do |csv|
    csv << ['CPF', 'Nome', 'Status', 'Renda', 'Margem', 'Eleg√≠vel', 'Data Nascimento', 'Matr√≠cula', 'Empregador']
    csv << ['81358237115', 'Exemplo', 'Sucesso', 'R$ 5.000,00', 'R$ 1.500,00', 'Sim', '01/01/1980', '12345', 'Empresa XYZ']
  end
  
  csv_data
end

# Inicializa√ß√£o
if __FILE__ == $0
  puts "üöÄ Iniciando Rob√¥ Maffezzolli CLT Facta (Ruby/Sinatra)..."
  puts "üåê Servidor rodando em http://0.0.0.0:4567"
  puts "üìã Credenciais configuradas: #{CREDENTIALS[:login]}"
end



# Cache global para dados da simula√ß√£o
$simulation_data = []

# Rota para exportar Excel
get '/api/export-excel' do
  content_type 'text/csv; charset=utf-8'
  
  # Nome do arquivo com timestamp
  timestamp = Time.now.strftime('%d-%mh%H-%M')
  attachment "Resultado#{timestamp}.csv"
  
  # Headers da planilha (sem acentos para evitar problemas)
  headers = [
    'CPF', 'Nome', 'Status', 'Data Nascimento', 'Sexo', 'Matricula',
    'Renda Mensal', 'Base Margem', 'Margem Disponivel', 'Elegivel',
    'Data Admissao', 'Data Desligamento', 'Empregador', 'CNPJ Empregador',
    'Tipo Inscricao', 'CNAE Descricao', 'Data Inicio Atividade Empregador',
    'Nome Mae', 'Nacionalidade', 'CBO Descricao', 'Codigo Categoria',
    'Pessoa Exposta Politicamente', 'Possui Alertas', 'Qtd Emprestimos Ativos',
    'Emprestimos Legados', 'Motivo Inelegibilidade', 'Erro Codigo',
    'Erro Mensagem', 'Status Code', 'Valor Maximo Emprestimo', 'Prazo Maximo',
    'Valor Contrato Maximo', 'Taxa Juros', 'Tabela Operacao', 'Timestamp'
  ]
  
  # Gera CSV com dados da simula√ß√£o
  csv_data = CSV.generate(col_sep: ';', headers: true) do |csv|
    csv << headers
    
    if $simulation_data && !$simulation_data.empty?
      $simulation_data.each do |item|
        csv << [
          item[:cpf] || 'N/A',
          item[:nome] || 'N/A',
          item[:status] || 'N/A',
          item[:data_nascimento] || 'N/A',
          item[:sexo] || 'N/A',
          item[:matricula] || 'N/A',
          item[:renda] || 'N/A',
          item[:base_margem] || 'N/A',
          item[:margem] || 'N/A',
          item[:elegivel] || 'N/A',
          item[:data_admissao] || 'N/A',
          item[:data_desligamento] || 'N/A',
          item[:empregador] || 'N/A',
          item[:cnpj_empregador] || 'N/A',
          item[:tipo_inscricao] || 'N/A',
          item[:cnae_descricao] || 'N/A',
          item[:data_inicio_atividade] || 'N/A',
          item[:nome_mae] || 'N/A',
          item[:nacionalidade] || 'N/A',
          item[:cbo_descricao] || 'N/A',
          item[:codigo_categoria] || 'N/A',
          item[:pessoa_exposta] || 'N/A',
          item[:possui_alertas] || 'N/A',
          item[:qtd_emprestimos] || 'N/A',
          item[:emprestimos_legados] || 'N/A',
          item[:motivo_inelegibilidade] || 'N/A',
          item[:erro_codigo] || 'N/A',
          item[:erro_mensagem] || 'N/A',
          item[:status_code] || 'N/A',
          item[:valor_maximo_emprestimo] || 'N/A',
          item[:prazo_maximo] || 'N/A',
          item[:valor_contrato_maximo] || 'N/A',
          item[:taxa_juros] || 'N/A',
          item[:tabela_operacao] || 'N/A',
          Time.now.strftime('%d/%m/%Y %H:%M:%S')
        ]
      end
    else
      # Se n√£o h√° dados, adiciona linha vazia
      csv << Array.new(headers.length, 'N/A')
    end
  end
  
  csv_data
end

